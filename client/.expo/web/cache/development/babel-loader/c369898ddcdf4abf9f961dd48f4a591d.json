{"ast":null,"code":"import { interpolate, Extrapolate, processColor } from \"react-native-reanimated\";\nimport { clamp, mix } from \"./Math\";\nexport var ColorSpace;\n\n(function (ColorSpace) {\n  ColorSpace[ColorSpace[\"RGB\"] = 0] = \"RGB\";\n  ColorSpace[ColorSpace[\"HSV\"] = 1] = \"HSV\";\n})(ColorSpace || (ColorSpace = {}));\n\nvar fract = function () {\n  var _f = function _f(v) {\n    return v - Math.floor(v);\n  };\n\n  _f._closure = {};\n  _f.asString = \"function fract(v){return v-Math.floor(v);}\";\n  _f.__workletHash = 8951080861677;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var opacity = function () {\n  var _f = function _f(c) {\n    return (c >> 24 & 255) / 255;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function opacity(c){return(c>>24&255)/255;}\";\n  _f.__workletHash = 14307773970532;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var red = function () {\n  var _f = function _f(c) {\n    return c >> 16 & 255;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function red(c){return c>>16&255;}\";\n  _f.__workletHash = 8636823632243;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var green = function () {\n  var _f = function _f(c) {\n    return c >> 8 & 255;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function green(c){return c>>8&255;}\";\n  _f.__workletHash = 6976881790628;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var blue = function () {\n  var _f = function _f(c) {\n    return c & 255;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function blue(c){return c&255;}\";\n  _f.__workletHash = 2190916407897;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var color = function () {\n  var _f = function _f(r, g, b) {\n    var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n  };\n\n  _f._closure = {};\n  _f.asString = \"function color(r,g,b){var alpha=arguments.length>3&&arguments[3]!==undefined?arguments[3]:1;return\\\"rgba(\\\"+r+\\\", \\\"+g+\\\", \\\"+b+\\\", \\\"+alpha+\\\")\\\";}\";\n  _f.__workletHash = 4744461373958;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var hsv2rgb = function () {\n  var _f = function _f(h, s, v) {\n    var K = {\n      x: 1,\n      y: 2 / 3,\n      z: 1 / 3,\n      w: 3\n    };\n    var p = {\n      x: Math.abs(fract(h + K.x) * 6 - K.w),\n      y: Math.abs(fract(h + K.y) * 6 - K.w),\n      z: Math.abs(fract(h + K.z) * 6 - K.w)\n    };\n    var rgb = {\n      x: v * mix(s, K.x, clamp(p.x - K.x, 0, 1)),\n      y: v * mix(s, K.x, clamp(p.y - K.x, 0, 1)),\n      z: v * mix(s, K.x, clamp(p.z - K.x, 0, 1))\n    };\n    return {\n      r: Math.round(rgb.x * 255),\n      g: Math.round(rgb.y * 255),\n      b: Math.round(rgb.z * 255)\n    };\n  };\n\n  _f._closure = {\n    fract: fract,\n    mix: mix,\n    clamp: clamp\n  };\n  _f.asString = \"function hsv2rgb(h,s,v){const{fract,mix,clamp}=jsThis._closure;{var K={x:1,y:2/3,z:1/3,w:3};var p={x:Math.abs(fract(h+K.x)*6-K.w),y:Math.abs(fract(h+K.y)*6-K.w),z:Math.abs(fract(h+K.z)*6-K.w)};var rgb={x:v*mix(s,K.x,clamp(p.x-K.x,0,1)),y:v*mix(s,K.x,clamp(p.y-K.x,0,1)),z:v*mix(s,K.x,clamp(p.z-K.x,0,1))};return{r:Math.round(rgb.x*255),g:Math.round(rgb.y*255),b:Math.round(rgb.z*255)};}}\";\n  _f.__workletHash = 17427279418264;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var hsv2color = function () {\n  var _f = function _f(h, s, v) {\n    var _hsv2rgb = hsv2rgb(h, s, v),\n        r = _hsv2rgb.r,\n        g = _hsv2rgb.g,\n        b = _hsv2rgb.b;\n\n    return color(r, g, b);\n  };\n\n  _f._closure = {\n    hsv2rgb: hsv2rgb,\n    color: color\n  };\n  _f.asString = \"function hsv2color(h,s,v){const{hsv2rgb,color}=jsThis._closure;{var _hsv2rgb=hsv2rgb(h,s,v),r=_hsv2rgb.r,g=_hsv2rgb.g,b=_hsv2rgb.b;return color(r,g,b);}}\";\n  _f.__workletHash = 10127222186;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var colorForBackground = function () {\n  var _f = function _f(r, g, b) {\n    var L = 0.299 * r + 0.587 * g + 0.114 * b;\n    return L > 186 ? 0x000000ff : 0xffffffff;\n  };\n\n  _f._closure = {};\n  _f.asString = \"function colorForBackground(r,g,b){var L=0.299*r+0.587*g+0.114*b;return L>186?0x000000ff:0xffffffff;}\";\n  _f.__workletHash = 13043722648116;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar rgbToHsv = function () {\n  var _f = function _f(c) {\n    var r = red(c) / 255;\n    var g = green(c) / 255;\n    var b = blue(c) / 255;\n    var ma = Math.max(r, g, b);\n    var mi = Math.min(r, g, b);\n    var h = 0;\n    var v = ma;\n    var d = ma - mi;\n    var s = ma === 0 ? 0 : d / ma;\n\n    if (ma === mi) {\n      h = 0;\n    } else {\n      switch (ma) {\n        case r:\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / d + 2;\n          break;\n\n        case b:\n          h = (r - g) / d + 4;\n          break;\n\n        default:\n      }\n\n      h /= 6;\n    }\n\n    return {\n      h: h,\n      s: s,\n      v: v\n    };\n  };\n\n  _f._closure = {\n    red: red,\n    green: green,\n    blue: blue\n  };\n  _f.asString = \"function rgbToHsv(c){const{red,green,blue}=jsThis._closure;{var r=red(c)/255;var g=green(c)/255;var b=blue(c)/255;var ma=Math.max(r,g,b);var mi=Math.min(r,g,b);var h=0;var v=ma;var d=ma-mi;var s=ma===0?0:d/ma;if(ma===mi){h=0;}else{switch(ma){case r:h=(g-b)/d+(g<b?6:0);break;case g:h=(b-r)/d+2;break;case b:h=(r-g)/d+4;break;default:}h/=6;}return{h:h,s:s,v:v};}}\";\n  _f.__workletHash = 14080538144328;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar interpolateColorsHSV = function () {\n  var _f = function _f(value, inputRange, colors) {\n    var colorsAsHSV = colors.map(function (c) {\n      return rgbToHsv(c);\n    });\n    var h = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n      return c.h;\n    }), Extrapolate.CLAMP);\n    var s = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n      return c.s;\n    }), Extrapolate.CLAMP);\n    var v = interpolate(value, inputRange, colorsAsHSV.map(function (c) {\n      return c.v;\n    }), Extrapolate.CLAMP);\n    return hsv2color(h, s, v);\n  };\n\n  _f._closure = {\n    rgbToHsv: rgbToHsv,\n    interpolate: interpolate,\n    Extrapolate: {\n      CLAMP: Extrapolate.CLAMP\n    },\n    hsv2color: hsv2color\n  };\n  _f.asString = \"function interpolateColorsHSV(value,inputRange,colors){const{rgbToHsv,interpolate,Extrapolate,hsv2color}=jsThis._closure;{var colorsAsHSV=colors.map(function(c){return rgbToHsv(c);});var h=interpolate(value,inputRange,colorsAsHSV.map(function(c){return c.h;}),Extrapolate.CLAMP);var s=interpolate(value,inputRange,colorsAsHSV.map(function(c){return c.s;}),Extrapolate.CLAMP);var v=interpolate(value,inputRange,colorsAsHSV.map(function(c){return c.v;}),Extrapolate.CLAMP);return hsv2color(h,s,v);}}\";\n  _f.__workletHash = 107105862100;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nvar interpolateColorsRGB = function () {\n  var _f = function _f(value, inputRange, colors) {\n    var r = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n      return red(c);\n    }), Extrapolate.CLAMP));\n    var g = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n      return green(c);\n    }), Extrapolate.CLAMP));\n    var b = Math.round(interpolate(value, inputRange, colors.map(function (c) {\n      return blue(c);\n    }), Extrapolate.CLAMP));\n    var a = interpolate(value, inputRange, colors.map(function (c) {\n      return opacity(c);\n    }), Extrapolate.CLAMP);\n    return color(r, g, b, a);\n  };\n\n  _f._closure = {\n    interpolate: interpolate,\n    red: red,\n    Extrapolate: {\n      CLAMP: Extrapolate.CLAMP\n    },\n    green: green,\n    blue: blue,\n    opacity: opacity,\n    color: color\n  };\n  _f.asString = \"function interpolateColorsRGB(value,inputRange,colors){const{interpolate,red,Extrapolate,green,blue,opacity,color}=jsThis._closure;{var r=Math.round(interpolate(value,inputRange,colors.map(function(c){return red(c);}),Extrapolate.CLAMP));var g=Math.round(interpolate(value,inputRange,colors.map(function(c){return green(c);}),Extrapolate.CLAMP));var b=Math.round(interpolate(value,inputRange,colors.map(function(c){return blue(c);}),Extrapolate.CLAMP));var a=interpolate(value,inputRange,colors.map(function(c){return opacity(c);}),Extrapolate.CLAMP);return color(r,g,b,a);}}\";\n  _f.__workletHash = 10598134508691;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\n\nexport var interpolateColor = function () {\n  var _f = function _f(value, inputRange, rawOutputRange) {\n    var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorSpace.RGB;\n    var outputRange = rawOutputRange.map(function (c) {\n      return typeof c === \"number\" ? c : processColor(c);\n    });\n\n    if (colorSpace === ColorSpace.HSV) {\n      return interpolateColorsHSV(value, inputRange, outputRange);\n    }\n\n    var result = interpolateColorsRGB(value, inputRange, outputRange);\n    return result;\n  };\n\n  _f._closure = {\n    ColorSpace: {\n      RGB: ColorSpace.RGB,\n      HSV: ColorSpace.HSV\n    },\n    processColor: processColor,\n    interpolateColorsHSV: interpolateColorsHSV,\n    interpolateColorsRGB: interpolateColorsRGB\n  };\n  _f.asString = \"function interpolateColor(value,inputRange,rawOutputRange){const{ColorSpace,processColor,interpolateColorsHSV,interpolateColorsRGB}=jsThis._closure;{var colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:ColorSpace.RGB;var outputRange=rawOutputRange.map(function(c){return typeof c===\\\"number\\\"?c:processColor(c);});if(colorSpace===ColorSpace.HSV){return interpolateColorsHSV(value,inputRange,outputRange);}var result=interpolateColorsRGB(value,inputRange,outputRange);return result;}}\";\n  _f.__workletHash = 13129393563922;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();\nexport var mixColor = function () {\n  var _f = function _f(value, color1, color2) {\n    var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ColorSpace.RGB;\n    return interpolateColor(value, [0, 1], [color1, color2], colorSpace);\n  };\n\n  _f._closure = {\n    ColorSpace: {\n      RGB: ColorSpace.RGB\n    },\n    interpolateColor: interpolateColor\n  };\n  _f.asString = \"function mixColor(value,color1,color2){const{ColorSpace,interpolateColor}=jsThis._closure;{var colorSpace=arguments.length>3&&arguments[3]!==undefined?arguments[3]:ColorSpace.RGB;return interpolateColor(value,[0,1],[color1,color2],colorSpace);}}\";\n  _f.__workletHash = 15037564182485;\n\n  global.__reanimatedWorkletInit(_f);\n\n  return _f;\n}();","map":{"version":3,"sources":["Colors.ts"],"names":["ColorSpace","fract","v","Math","opacity","c","red","green","blue","color","alpha","hsv2rgb","K","x","y","z","w","p","h","rgb","mix","clamp","r","g","b","hsv2color","colorForBackground","L","rgbToHsv","ma","mi","d","s","interpolateColorsHSV","colorsAsHSV","colors","interpolate","Extrapolate","interpolateColorsRGB","a","interpolateColor","colorSpace","RGB","outputRange","rawOutputRange","processColor","result","mixColor"],"mappings":"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","sourcesContent":["import {\n  interpolate,\n  Extrapolate,\n  processColor,\n} from \"react-native-reanimated\";\n\nimport { clamp, mix } from \"./Math\";\n\n/**\n *  @summary TypeScript type to define an animation value as color.\n *  @example\n    // Color can be of string or number depending of the context in which it was executed\n    const color: Animated.SharedValue<Color> = useDerivedValue(() => mixColor(progress.value, \"blue\", \"red\"));\n */\nexport enum ColorSpace {\n  RGB,\n  HSV,\n}\n\nconst fract = (v: number) => {\n  \"worklet\";\n  return v - Math.floor(v);\n};\n\nexport const opacity = (c: number) => {\n  \"worklet\";\n  return ((c >> 24) & 255) / 255;\n};\n\nexport const red = (c: number) => {\n  \"worklet\";\n  return (c >> 16) & 255;\n};\n\nexport const green = (c: number) => {\n  \"worklet\";\n  return (c >> 8) & 255;\n};\n\nexport const blue = (c: number) => {\n  \"worklet\";\n  return c & 255;\n};\n\nexport const color = (r: number, g: number, b: number, alpha = 1): string => {\n  \"worklet\";\n  return `rgba(${r}, ${g}, ${b}, ${alpha})`;\n};\n\n/**\n * @summary Convert HSV to RGB\n */\nexport const hsv2rgb = (h: number, s: number, v: number) => {\n  \"worklet\";\n  // vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  const K = {\n    x: 1,\n    y: 2 / 3,\n    z: 1 / 3,\n    w: 3,\n  };\n  // vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  const p = {\n    x: Math.abs(fract(h + K.x) * 6 - K.w),\n    y: Math.abs(fract(h + K.y) * 6 - K.w),\n    z: Math.abs(fract(h + K.z) * 6 - K.w),\n  };\n  // return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n  const rgb = {\n    x: v * mix(s, K.x, clamp(p.x - K.x, 0, 1)),\n    y: v * mix(s, K.x, clamp(p.y - K.x, 0, 1)),\n    z: v * mix(s, K.x, clamp(p.z - K.x, 0, 1)),\n  };\n  return {\n    r: Math.round(rgb.x * 255),\n    g: Math.round(rgb.y * 255),\n    b: Math.round(rgb.z * 255),\n  };\n};\n\n/**\n * @summary Convert HSV to RGB\n */\nexport const hsv2color = (h: number, s: number, v: number) => {\n  \"worklet\";\n  const { r, g, b } = hsv2rgb(h, s, v);\n  return color(r, g, b);\n};\n\n/**\n * @summary Returns black or white depending on the value of the background color.\n */\nexport const colorForBackground = (r: number, g: number, b: number) => {\n  \"worklet\";\n  const L = 0.299 * r + 0.587 * g + 0.114 * b;\n  return L > 186 ? 0x000000ff : 0xffffffff;\n};\n\n/**\n * @summary Convert RGB to HSV\n */\nconst rgbToHsv = (c: number) => {\n  \"worklet\";\n  const r = red(c) / 255;\n  const g = green(c) / 255;\n  const b = blue(c) / 255;\n\n  const ma = Math.max(r, g, b);\n  const mi = Math.min(r, g, b);\n  let h = 0;\n  const v = ma;\n\n  const d = ma - mi;\n  const s = ma === 0 ? 0 : d / ma;\n  if (ma === mi) {\n    h = 0; // achromatic\n  } else {\n    switch (ma) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n      default: // do nothing\n    }\n    h /= 6;\n  }\n  return { h, s, v };\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: number[],\n  colors: number[]\n) => {\n  \"worklet\";\n  const colorsAsHSV = colors.map((c) => rgbToHsv(c));\n  const h = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.h),\n    Extrapolate.CLAMP\n  );\n  const s = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.s),\n    Extrapolate.CLAMP\n  );\n  const v = interpolate(\n    value,\n    inputRange,\n    colorsAsHSV.map((c) => c.v),\n    Extrapolate.CLAMP\n  );\n  return hsv2color(h, s, v);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: number[],\n  colors: number[]\n) => {\n  \"worklet\";\n  const r = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => red(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const g = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => green(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const b = Math.round(\n    interpolate(\n      value,\n      inputRange,\n      colors.map((c) => blue(c)),\n      Extrapolate.CLAMP\n    )\n  );\n  const a = interpolate(\n    value,\n    inputRange,\n    colors.map((c) => opacity(c)),\n    Extrapolate.CLAMP\n  );\n  return color(r, g, b, a);\n};\n\n/**\n *  @summary Interpolate an animation value into a color.\n    The color can be interpolated in the RGB or HSV color space (default is RGB).\n *  @example\n    const theta = useSharedValue(Math.PI);\n    const backgroundColor = useDerivedValue(() => {\n      return interpolateColor(\n        theta.value,\n        [0, Math.PI, Math.PI * 2],\n        [\"#ff3884\", StyleGuide.palette.primary, \"#38ffb3\"]\n        ColorSpace.HSV // default is RGB\n      );\n    });\n  */\nexport const interpolateColor = (\n  value: number,\n  inputRange: number[],\n  rawOutputRange: string[],\n  colorSpace: ColorSpace = ColorSpace.RGB\n) => {\n  \"worklet\";\n  const outputRange = rawOutputRange.map((c) =>\n    typeof c === \"number\" ? c : processColor(c)\n  );\n  if (colorSpace === ColorSpace.HSV) {\n    return interpolateColorsHSV(value, inputRange, outputRange);\n  }\n  const result = interpolateColorsRGB(value, inputRange, outputRange);\n  return result;\n};\n\n/**\n *  @summary Identical to interpolateColor() but with an animation value that goes from 0 to 1.\n *  @example\n    const backgroundColor = useDerivedValue(() =>\n      mixColor(progress.value, \"#ff3884\", \"#38ffb3\")\n    );\n  */\nexport const mixColor = (\n  value: number,\n  color1: string,\n  color2: string,\n  colorSpace: ColorSpace = ColorSpace.RGB\n) => {\n  \"worklet\";\n  return interpolateColor(value, [0, 1], [color1, color2], colorSpace);\n};\n"]},"metadata":{},"sourceType":"module"}